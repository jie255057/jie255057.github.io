<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我誰～～～</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.willychang.com/"/>
  <updated>2020-12-05T15:40:39.052Z</updated>
  <id>http://www.willychang.com/</id>
  
  <author>
    <name>Willy Chang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ruby on Rails, Rspec use webmock gem</title>
    <link href="http://www.willychang.com/2020/12/05/Ruby-on-Rails-Rspec-use-webmock-gem/"/>
    <id>http://www.willychang.com/2020/12/05/Ruby-on-Rails-Rspec-use-webmock-gem/</id>
    <published>2020-12-05T14:35:58.000Z</published>
    <updated>2020-12-05T15:40:39.052Z</updated>
    
    <content type="html"><![CDATA[<p>當在撰寫測試時，肯定會遇到是在處理外部服務(api)的事情。<br>正因為我也剛好使用了 <code>coverage</code> 這個 gem，來看看測試覆蓋率。<br>不管怎麼做，就是沒有頭緒，不知道怎麼在測試裡執行裡面的程式。<br>我們也必須確保這段程式沒有誤。</p><p>直到我用了 <code>webmock</code> 這個 gem，也就是今天的主角。<br><code>webmock</code> 是用於在Ruby中對HTTP請求進行 stub 設置與期望的結果。它允許我們對HTTP請求進行stub，並設置和驗證對任何HTTP請求的期望。也能使用 <code>Net::HTTP</code> 當然也可以使用 <code>HTTParty</code></p><p>當我們在 <code>Rspec</code> 使用 <code>webmock</code><br>需要設定與讓我們通過禁用我們的測試套件來確保它們不能發出外部請求</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spec_helper.rb</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;webmock/rspec&#x27;</span></span><br><span class="line">WebMock.disable_net_connect!(<span class="symbol">allow_localhost:</span> <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>我設定了一個 <code>UserService</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(email)</span></span></span><br><span class="line">    <span class="variable">@email</span> = email</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">user_profile</span></span></span><br><span class="line">    HTTParty.get(<span class="string">&#x27;https://demo.com/profile&#x27;</span>, <span class="symbol">query:</span> &#123; <span class="symbol">user:</span> <span class="variable">@email</span> &#125;, <span class="symbol">headers:</span> &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="comment"># &#123; status: 200, parsed_resp: &#123; name: &#x27;willy&#x27;, age: 18 &#125; &#125;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add_new_user</span></span></span><br><span class="line">    HTTParty.post(<span class="string">&#x27;https://demo.com/new_user&#x27;</span>, <span class="symbol">body:</span> &#123; <span class="symbol">user:</span> <span class="variable">@user</span> &#125;, <span class="symbol">headers:</span> &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;)</span><br><span class="line">    <span class="comment"># return</span></span><br><span class="line">    <span class="comment"># &#123; status: &#x27;ok&#x27; &#125;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>這是用來模擬可以用 <code>email</code>，來獲取使用者資料或是新增使用者的 <code>service</code></p><p>接下來就可以開始撰寫我們的測試了</p><p>首先我們針對 <code>#user_profile</code> 這個 <code>method</code> 開始</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">&#x27;rails_helper&#x27;</span></span><br><span class="line"></span><br><span class="line">RSpec.describe UserService <span class="keyword">do</span></span><br><span class="line">  describe <span class="string">&#x27;#user_profile&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    it <span class="string">&#x27;Correct URI&#x27;</span> <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># 這裡我們需要 stub 我們要處理的 api uri</span></span><br><span class="line">      <span class="comment"># 我們可以設定 headers 或是 body or query params</span></span><br><span class="line">      stub_request(<span class="symbol">:get</span>, <span class="string">&#x27;https://demo.com/profile&#x27;</span>).with(</span><br><span class="line">        <span class="symbol">headers:</span> &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">        <span class="symbol">query:</span> hash_including(&#123; <span class="symbol">user:</span> <span class="string">&#x27;willy@gmail.com&#x27;</span> &#125;)</span><br><span class="line">      ).to_return(<span class="symbol">body:</span> &#123; <span class="symbol">status:</span> <span class="number">200</span>, <span class="symbol">name:</span> <span class="string">&#x27;willy&#x27;</span>, <span class="symbol">age:</span> <span class="number">18</span> &#125;.to_json)</span><br><span class="line">      <span class="comment"># to_return 就是模擬 api 回傳的結果</span></span><br><span class="line">      resp = UserService.new(<span class="string">&#x27;willy@gmail.com&#x27;</span>).user_profile</span><br><span class="line">      result = JSON.parse(resp)</span><br><span class="line"></span><br><span class="line">      expect(result[<span class="string">&#x27;status&#x27;</span>]).to eq(<span class="number">200</span>)</span><br><span class="line">      expect(result[<span class="string">&#x27;name&#x27;</span>]).to eq(<span class="string">&#x27;willy&#x27;</span>)</span><br><span class="line">      expect(result[<span class="string">&#x27;age&#x27;</span>]).not_to eq(<span class="number">30</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>我們把 <code>uri</code> 換成別的看看</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">it <span class="string">&#x27;Wrong URI&#x27;</span> <span class="keyword">do</span></span><br><span class="line">  <span class="comment"># 這裡我們需要 stub 換成別的網址看看</span></span><br><span class="line">  <span class="comment"># 我們可以設定 headers 或是 body or query params</span></span><br><span class="line">  stub_request(<span class="symbol">:get</span>, <span class="string">&#x27;https://test.com/profile&#x27;</span>).with(</span><br><span class="line">    <span class="symbol">headers:</span> &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span> &#125;,</span><br><span class="line">    <span class="symbol">query:</span> hash_including(&#123; <span class="symbol">user:</span> <span class="string">&#x27;willy@gmail.com&#x27;</span> &#125;)</span><br><span class="line">  ).to_return(<span class="symbol">body:</span> &#123; <span class="symbol">status:</span> <span class="number">200</span>, <span class="symbol">name:</span> <span class="string">&#x27;willy&#x27;</span>, <span class="symbol">age:</span> <span class="number">18</span> &#125;.to_json)</span><br><span class="line">  resp = UserService.new(<span class="string">&#x27;willy@gmail.com&#x27;</span>).user_profile</span><br><span class="line">  result = JSON.parse(resp)</span><br><span class="line"></span><br><span class="line">  expect(result[<span class="string">&#x27;status&#x27;</span>]).to eq(<span class="number">200</span>)</span><br><span class="line">  expect(result[<span class="string">&#x27;name&#x27;</span>]).to eq(<span class="string">&#x27;willy&#x27;</span>)</span><br><span class="line">  expect(result[<span class="string">&#x27;age&#x27;</span>]).not_to eq(<span class="number">30</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>沒意外的話，在 run rspec 時，會得到下面的回應</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebMock::NetConnectNotAllowedError</span><br></pre></td></tr></table></figure><p>我們也可以<code>stub_request(:post)</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">describe <span class="string">&#x27;#add_new_user&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    it <span class="string">&#x27;create user success&#x27;</span> <span class="keyword">do</span></span><br><span class="line">      stub_request(<span class="symbol">:post</span>, <span class="string">&#x27;https://demo.com/new_user&#x27;</span>).with(</span><br><span class="line">        <span class="symbol">headers:</span> &#123; <span class="string">&#x27;Content-Type&#x27;</span> =&gt; <span class="string">&#x27;application/json&#x27;</span> &#125;</span><br><span class="line">      ).to_return(<span class="symbol">body:</span> &#123; <span class="symbol">status:</span> <span class="number">200</span>, <span class="symbol">message:</span> <span class="string">&#x27;ok&#x27;</span> &#125;.to_json)</span><br><span class="line">      resp = UserService.new(<span class="string">&#x27;willy@gmail.com&#x27;</span>).add_new_user</span><br><span class="line">      result = JSON.parse(resp)</span><br><span class="line"></span><br><span class="line">      expect(result[<span class="string">&#x27;status&#x27;</span>]).to eq(<span class="number">200</span>)</span><br><span class="line">      expect(result[<span class="string">&#x27;message&#x27;</span>]).to eq(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment"># it &#x27;user already exists&#x27; do</span></span><br><span class="line">    <span class="comment"># end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>結論：</p><ol><li><code>stub_request</code> 的 <code>uri</code> 必須跟原本的 <code>get</code> or <code>post</code> 的 <code>uri</code> 一樣<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例如我在 <span class="string">`#user_profile`</span></span><br><span class="line">HTTParty.get(<span class="string">&#x27;https://demo.com/profile&#x27;</span>)</span><br><span class="line">那我 stub_request(<span class="symbol">:get</span>, <span class="string">&#x27;https://demo.com/profile&#x27;</span>) 就必須跟上面一樣，否則就會出現上面的 error</span><br></pre></td></tr></table></figure></li><li>我們要確保我們的測試套件不會影響任何第三方服務。我們的測試應該獨立運行。</li><li>加速我們針對測試的撰寫</li></ol><p>-W</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;當在撰寫測試時，肯定會遇到是在處理外部服務(api)的事情。&lt;br&gt;正因為我也剛好使用了 &lt;code&gt;coverage&lt;/code&gt; 這個 gem，來看看測試覆蓋率。&lt;br&gt;不管怎麼做，就是沒有頭緒，不知道怎麼在測試裡執行裡面的程式。&lt;br&gt;我們也必須確保這段程式沒有誤。&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>用 asdf 來管理 Ruby 版本</title>
    <link href="http://www.willychang.com/2020/12/01/%E7%94%A8-asdf-%E4%BE%86%E7%AE%A1%E7%90%86-Ruby-%E7%89%88%E6%9C%AC/"/>
    <id>http://www.willychang.com/2020/12/01/%E7%94%A8-asdf-%E4%BE%86%E7%AE%A1%E7%90%86-Ruby-%E7%89%88%E6%9C%AC/</id>
    <published>2020-12-01T15:00:26.000Z</published>
    <updated>2020-12-02T02:30:07.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用-asdf-來管理-Ruby-版本"><a href="#用-asdf-來管理-Ruby-版本" class="headerlink" title="用 asdf 來管理 Ruby 版本"></a>用 asdf 來管理 Ruby 版本</h1><p>我原本是用 rvm 來做版控，但後來想說用看看 asdf 好了</p><p>安裝 asdf 的步驟就先跳過了</p><p>首先要先做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asdf plugin-add ruby</span><br></pre></td></tr></table></figure><p>這時可以需入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asdf plugin-list</span><br><span class="line">#可以看到</span><br><span class="line">ruby</span><br></pre></td></tr></table></figure><p>之後就可以安裝你要的 ruby 版本了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asdf install ruby 2.6.3</span><br></pre></td></tr></table></figure><p>安裝完畢後，可以輸入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">asdf list</span><br><span class="line">#可以看到已安裝的版本</span><br><span class="line">ruby</span><br><span class="line">  2.6.3</span><br></pre></td></tr></table></figure><p>由於已經把<code>rvm</code>刪除了，所以這時候在專案底下應該要跑 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install bundler</span><br><span class="line">bundle install</span><br></pre></td></tr></table></figure><p>當然也可設定各環境的版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asdf shell &lt;name&gt; &lt;version&gt; Set the package version in the current shell</span><br><span class="line">asdf local &lt;name&gt; &lt;version&gt; Set the package local version</span><br><span class="line">asdf global &lt;name&gt; &lt;version&gt; Set the package global version</span><br></pre></td></tr></table></figure><p>但每個專案下使用的版本都不一樣<br>所以也必須告訴 <code>asdf</code>要使用哪個版本<br>那就必須在專案目錄底下新增 <code>.tool-versions</code><br>在裡面設定版本<br>設定好後可以輸入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asdf current</span><br><span class="line">#可以看到</span><br><span class="line">ruby 2.5.7 (set by &#x2F;Users&#x2F;willychang&#x2F;Documents&#x2F;oakda&#x2F;kakao-spree&#x2F;.tool-versions)</span><br></pre></td></tr></table></figure><p>或是在專案目錄底下新增 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">touch .asdfrc</span><br><span class="line"></span><br><span class="line">#輸入</span><br><span class="line">legacy_version_file &#x3D; yes</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">asdf current</span><br><span class="line">#這時候他會去找 .ruby-versions 裡面的版本</span><br><span class="line">ruby 2.5.7 (set by &#x2F;Users&#x2F;willychang&#x2F;Documents&#x2F;oakda&#x2F;kakao-spree&#x2F;.ruby-versions)</span><br></pre></td></tr></table></figure><p>但有時候在每個專案下已經指定版本了，也有以後的兩個檔案<br>但還是會出現</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">asdf: No version set for command rails</span><br><span class="line">you might want to add one of the following in your .tool-versions file:</span><br><span class="line"></span><br><span class="line">ruby 2.x.x</span><br><span class="line">ruby 2.x.x</span><br></pre></td></tr></table></figure><p>因為每個版本的套件都不同，這時候只要下，重新安裝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asdf reshim</span><br></pre></td></tr></table></figure><p>詳細介紹可參考下列文章<br><a href="https://asdf-vm.com/#/" target="_blank" rel="noopener">asdf 官網</a><br><a href="https://github.com/asdf-vm/asdf" target="_blank" rel="noopener">asdf githut</a><br><a href="http://stratus3d.com/blog/2015/11/27/introducing-asdf-the-extendable-version-manager/" target="_blank" rel="noopener">Introducing Asdf: The Extendable Version Manager - Stratus3D</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用-asdf-來管理-Ruby-版本&quot;&gt;&lt;a href=&quot;#用-asdf-來管理-Ruby-版本&quot; class=&quot;headerlink&quot; title=&quot;用 asdf 來管理 Ruby 版本&quot;&gt;&lt;/a&gt;用 asdf 來管理 Ruby 版本&lt;/h1&gt;&lt;p&gt;我原本是用 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>學習寫程式一年了</title>
    <link href="http://www.willychang.com/2020/10/30/%E5%AD%B8%E7%BF%92%E5%AF%AB%E7%A8%8B%E5%BC%8F%E4%B8%80%E5%B9%B4%E4%BA%86/"/>
    <id>http://www.willychang.com/2020/10/30/%E5%AD%B8%E7%BF%92%E5%AF%AB%E7%A8%8B%E5%BC%8F%E4%B8%80%E5%B9%B4%E4%BA%86/</id>
    <published>2020-10-30T14:36:02.000Z</published>
    <updated>2020-10-30T15:15:28.757Z</updated>
    
    <content type="html"><![CDATA[<p>學習寫程式一年了。<br>往回看一年前的自己，覺得自己做的這個決定很棒，畢竟我不是個擅長做決定的人。</p><p>就來說說當時的我在想什麼吧。</p><p>很多人問我，你怎麼會想學這個，我相信有問的，我都會回答 <strong>靈光一閃</strong>，但我說的是真的。<br>我就一個非本科的，再怎麼想，也不會想到這個吧，況且也沒有對象讓我學習讓我參考。<br>從一開始的上網找資料，找補習班，包括巨x、聯x，當然還有五倍，去試聽，去上說明會，最後選擇了五倍。</p><p>為何會選擇五倍，對我來說，需要學習一項完全沒有觸碰過的，師資當然是考量，但我反而比較看重的是學習環境，畢竟有好的環境，才有好的學習態度吧，我覺得！也不是要說誰誰誰不好，可能去試聽或聽說明會，應該就能感覺出差別吧。</p><p>從一開始的掙扎，就像上面說的，我完全沒碰過，也不是本科，頂多就學電影裡的駭客，敲自家鍵盤就感覺自己很厲害了😂然後一直問五倍的粉絲團很多問題，啊我就怕被罵啊！連可不可以帶便當，有沒有微波爐，都在問了！到後來決定要上課了，也下定決心了，才發現，一切沒有想的那麼簡單。</p><p>一到五，每天7-8小時的課程，充實，真的充實！但對我來說養分過多，吸收多少每個人可能不一樣，起初很怕自己跟不上，但說真的有點跟不上，不是老師進度太快，而是遇到問題了沒發問，就當作大家都懂了，但後來才知道，很多同學都跟我一樣霧煞煞。因為大家都不敢舉手發問，怕問了很丟臉的問題，才導致這種情況發生。回家才死命看錄製的課程，效果不佳👎</p><p>回家也有功課，剛開始每天就是回家拼了命練習CRUD，然後完成老師的作業。印象深刻，Amos的作業，手刻官網吧，隔天被噴得稀巴爛，同學都做得很好，我倒是不知道在刻三小，但好的事情是，起碼我知道自己需要改進的地方在哪裡，雖然是在全班面前噴，但以前都在家長面前被打了，現在老師應該不會打我吧，應該吧。</p><p>好啦上面可能只是一些上課的事情，但其實想說的還是以下這些吧。</p><p>寫程式呢，對我來說就像腦筋急轉彎，很多關卡要動腦才能過關，這可能像是功能之類的。加上我不是本科，很多電腦科學的事情，說真的我不知道，完全不懂，但這一路上遇到很多好人熱心的人，總是不計代價的教我，就像助教Fxxd(我不知道是誰) 雖然會說，<strong>你這在寫什麼啦，胡搞瞎搞之類的</strong>，然後問你懂不懂，我當然不懂啊，懂的話還會被罵，又不是討罵。最後還是一一講解原理，當然還有很多熱心的人，我都記住你們無私的教學。</p><p>我一直覺得我很幸運，在上課時，或是現在已經在工作了，遇到很多幫助我的人，我知道這行業沒有很簡單，也不想當個半調子的人，所以我還是一直在學習，只要是能吸收的，就把它變成自己的。</p><p><strong>現在有了目標，我可能還看不到它的尾巴，我會持續向它邁進。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;學習寫程式一年了。&lt;br&gt;往回看一年前的自己，覺得自己做的這個決定很棒，畢竟我不是個擅長做決定的人。&lt;/p&gt;
&lt;p&gt;就來說說當時的我在想什麼吧。&lt;/p&gt;
&lt;p&gt;很多人問我，你怎麼會想學這個，我相信有問的，我都會回答 &lt;strong&gt;靈光一閃&lt;/strong&gt;，但我說的是真的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我是個運動員</title>
    <link href="http://www.willychang.com/2020/09/06/%E6%88%91%E6%98%AF%E5%80%8B%E9%81%8B%E5%8B%95%E5%93%A1/"/>
    <id>http://www.willychang.com/2020/09/06/%E6%88%91%E6%98%AF%E5%80%8B%E9%81%8B%E5%8B%95%E5%93%A1/</id>
    <published>2020-09-06T06:03:28.000Z</published>
    <updated>2020-09-06T06:51:59.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我曾經是運動員，但我還留著運動員的血液。"><a href="#我曾經是運動員，但我還留著運動員的血液。" class="headerlink" title="我曾經是運動員，但我還留著運動員的血液。"></a>我曾經是運動員，但我還留著運動員的血液。</h1><p>運動員可以幹嘛，沒幹嘛，我只是想講而已，怎樣？怪我摟？<br>可能大家還是覺得運動員只是頭腦簡單，四肢發達這樣吧。<br>但我今天也不是來說這些的。</p><p>其實每次跟朋友出去吃飯，可能是現在的職業，大家看到我都會說好屌喔好猛喔。<br>對，其實我也覺得好屌，從打棒球到打程式碼，之前我說過，我在我身邊是第一個，應該吧。<br>但我覺得不是我很厲害，而是我很幸運，因為遇到的貴人很多，一路跌跌撞撞的輔助我。</p><p>很多人問，『你怎麼會想學這個啊？』，我都會回說 <code>因為靈光一閃</code>。</p><p>不打球後，我要做什麼？相信這是很多人會遇到的問題，畢竟我們把現在跟未來都獻給了運動，<br>我們有夢想，踏上職業，把所有都投入。<br>練習的時間，大概佔了一天的三分之一，睡覺也是。那剩下的時間，可能包括自主訓練，跟娛樂。</p><p>絕大部分的運動員都願意學習新東西，不要說不相信，今天科技那麼發達，選手很聰明，<br>在網路上看到新技術，職業都在用那套，但球隊或是教練卻還在教舊式的方法，選手難免心裡會有些不同的想法。<br>因為現在沒打了，才發現有時候換個角度，換個想法，就不會產生出對立的感覺，這我就不說了。</p><p>那今天我想說的，其實是剩下的時間那部分。</p><p>自主訓練，推，沒話講。</p><p>娛樂可以，但不要多，覺得沒有說服力，認識我的都知道我練完球，就是坐在電腦前，不是學習，而是打遊戲看影片。<br>就是這樣，我今天才想講。<br>大學因為比較不像高中國中需要教練在旁邊盯著，大家都是大人了，相對的你也得為自己負責了。</p><h1 id="學習，找個有一點點興趣的"><a href="#學習，找個有一點點興趣的" class="headerlink" title="學習，找個有一點點興趣的"></a>學習，找個有一點點興趣的</h1><p>語言、畫圖等等不管，我是蠻推語言的啦，如果以後出國，語言可以幫助你很多。<br>一點點興趣，積少成多，四年時間很多吧。<br>但這點需要是你自己願意花時間的學習，而不是別人逼著你，因為自學的前提是你喜歡。</p><p>為何要學習，奉獻一生給自己的夢想，不是很酷嗎？挺酷的！<br>但確定是給夢想嗎？那就不一定了。<br>記得某次體育新聞，周思齊賢拜說現在本土登錄過的球員只有<code>900多個</code><br>30年了，就知道有多少人沒有照自己的藍圖走。</p><p>當然，我相信不打之後，不管學什麼，你都會帶著運動員的精神努力，快40度的天氣都撐過了。<br>但莫忘初衷，當初我們不懂就問，想進步就問，換個環境，依然必須保持這個好優點，<br>即使在白痴的問題，因為就是不會，想知道原因，想進步，想變好才發問的(但可以先自己查一下答案)<br>不要怕被罵，反正他也不會拿教練棒打你了，那就罵吧，不罵不成器啊！</p><h1 id="學習，會使你成長，成為別人也拿不走的。"><a href="#學習，會使你成長，成為別人也拿不走的。" class="headerlink" title="學習，會使你成長，成為別人也拿不走的。"></a>學習，會使你成長，成為別人也拿不走的。</h1><p>-W</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我曾經是運動員，但我還留著運動員的血液。&quot;&gt;&lt;a href=&quot;#我曾經是運動員，但我還留著運動員的血液。&quot; class=&quot;headerlink&quot; title=&quot;我曾經是運動員，但我還留著運動員的血液。&quot;&gt;&lt;/a&gt;我曾經是運動員，但我還留著運動員的血液。&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ruby on Rails Hash and HashWithIndifferentAccess</title>
    <link href="http://www.willychang.com/2020/09/06/Ruby-on-Rails-Hash-and-HashWithIndifferentAccess/"/>
    <id>http://www.willychang.com/2020/09/06/Ruby-on-Rails-Hash-and-HashWithIndifferentAccess/</id>
    <published>2020-09-06T05:43:17.000Z</published>
    <updated>2020-09-06T05:51:39.227Z</updated>
    
    <content type="html"><![CDATA[<p>有時候我們在 <code>Hash</code> 中要拿取 :key 時, 我們可能會用 <code>sample</code> or <code>string</code><br>但我們用 <code>string</code> 卻會拿到 <code>nil</code></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123; <span class="symbol">a:</span> <span class="number">123</span> &#125;</span><br><span class="line">a[<span class="symbol">:a</span>] -&gt; <span class="number">123</span></span><br><span class="line">a[<span class="string">'a'</span>] -&gt; <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>但為什麼在 <code>Rails</code> 的時候卻可以？<br>因為 <code>Rails</code> 的 ActiveSupport::HashWithIndifferentAccess 幫了大忙<br>讓開發者可以同時使用 <code>sample</code> 跟 <code>string</code> 來拿取 :key。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有時候我們在 &lt;code&gt;Hash&lt;/code&gt; 中要拿取 :key 時, 我們可能會用 &lt;code&gt;sample&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;&lt;br&gt;但我們用 &lt;code&gt;string&lt;/code&gt; 卻會拿到 &lt;code&gt;nil&lt;/code&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Rails Capybara</title>
    <link href="http://www.willychang.com/2020/09/03/Rails-Capybara/"/>
    <id>http://www.willychang.com/2020/09/03/Rails-Capybara/</id>
    <published>2020-09-03T08:42:58.000Z</published>
    <updated>2020-09-03T08:56:37.955Z</updated>
    
    <content type="html"><![CDATA[<p>Rails Capybara 這個 gem, 相信很多人都是拿來做 test,<br>我原本也是這麼想, 但基於某次主管把它拿來做別的事情後, 我改觀了, 果然經驗很重要！！！</p><p>某次因為要批次列印 c2c 店到店的物流單, 但綠界沒有這個 api 啊啊啊<br>但客戶又有這個需求, 這時求救於主管, 一語點醒夢中人<br>就用 Capybara 的 browser 來幫你自動按就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gem &#39;capybara&#39;</span><br><span class="line">gem &#39;selenium-webdriver&#39;</span><br><span class="line">gem &#39;capybara-screenshot&#39;</span><br><span class="line">gem &quot;cuprite&quot;</span><br></pre></td></tr></table></figure><p>之後我寫了一個 <code>service</code> 來執行</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'capybara'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'selenium-webdriver'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capybara-screenshot'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'capybara/cuprite'</span></span><br></pre></td></tr></table></figure><p>接下來就是一些基本設定</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#礙於每個人的設定不同, 所以也不一定會一樣</span></span><br><span class="line">Capybara.javascript_driver = <span class="symbol">:cuprite</span></span><br><span class="line">Capybara.default_driver = <span class="symbol">:selenium</span></span><br><span class="line">Capybara.default_max_wait_time = <span class="number">7</span></span><br><span class="line">Capybara.app_host = <span class="string">"<span class="subst">#&#123;Settings.default_url_options.protocol&#125;</span>://"</span> + Settings.default_url_options.host.to_s</span><br><span class="line">Capybara.run_server = <span class="literal">true</span></span><br><span class="line">Capybara.register_driver <span class="symbol">:cuprite</span> <span class="keyword">do</span> <span class="params">|app|</span></span><br><span class="line">  options = &#123; <span class="symbol">window_size:</span> [<span class="number">1024</span>, <span class="number">768</span>], <span class="symbol">headless:</span> <span class="literal">true</span>, <span class="symbol">timeout:</span> <span class="number">120</span>, <span class="symbol">process_timeout:</span> <span class="number">120</span>, <span class="symbol">browser_options:</span> &#123; <span class="string">'no-sandbox'</span>: <span class="literal">nil</span> &#125; &#125;</span><br><span class="line">  Capybara::Cuprite::Driver.new(app, options)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">@session = Capybara::Session.new(<span class="symbol">:cuprite</span>)</span><br><span class="line">@session.driver.add_headers(&#123; <span class="string">'User-Agent'</span> =&gt; <span class="string">'Cuprite'</span>, <span class="string">'Accept-Language'</span> =&gt; <span class="string">'zh-tw'</span> &#125;)</span><br></pre></td></tr></table></figure><p>那其實接下來就是行為觸發, 好比像在寫測試一樣, 根據你的需求去執行.</p><p>但就是想說, 有時候如果把一個東西定義了上了標籤, 就好像刻板印象一樣,<br>但其實可以發揮的作用也是很多, 這是在提醒自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rails Capybara 這個 gem, 相信很多人都是拿來做 test,&lt;br&gt;我原本也是這麼想, 但基於某次主管把它拿來做別的事情後, 我改觀了, 果然經驗很重要！！！&lt;/p&gt;
&lt;p&gt;某次因為要批次列印 c2c 店到店的物流單, 但綠界沒有這個 api 啊啊啊&lt;br
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Jquery siblings method</title>
    <link href="http://www.willychang.com/2020/08/10/Jquery-siblings-method/"/>
    <id>http://www.willychang.com/2020/08/10/Jquery-siblings-method/</id>
    <published>2020-08-10T14:47:44.000Z</published>
    <updated>2020-08-10T15:09:52.533Z</updated>
    
    <content type="html"><![CDATA[<p>雖然 <code>Jquery</code>在現今來說很野蠻，但今天不管它野不野蠻。</p><p>因為專案的關西，前端也會碰到(可以趁機練習)，今天透過<code>ajax</code>來說看看。</p><p>有時候我們需要透過js來尋找我們要的元素。<br>但當我們在迴圈印出資料時，每個<code>class</code>, <code>id</code> 名稱皆會相同。<br>所以我們可以透過<code>this</code>先拿到當下的元素。<br>在透過 <code>siblings()</code>來尋找同層級的元素。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下為erb，僅擷取部分</span></span><br><span class="line"></span><br><span class="line">&lt;% @orders.each <span class="keyword">do</span> <span class="params">|order|</span> %&gt;</span><br><span class="line">  &lt;td&gt;&lt;%= link_to order.number, edit_admin_order_path(order) %&gt;&lt;br&gt;</span><br><span class="line">      &lt;%= hidden_field_tag order.shipments_number %&gt;</span><br><span class="line">      &lt;input type="text" class="track-val" value="&lt;%= order.track_number %&gt;" style="width:50%;" disabled="true"&gt;</span><br><span class="line">      &lt;%= link_to <span class="string">'edit'</span>, <span class="string">'編輯'</span>, <span class="string">'#'</span>, <span class="class"><span class="keyword">class</span>: '<span class="title">edit</span>-<span class="title">tracking</span> <span class="title">btn</span> <span class="title">btn</span>-<span class="title">primary</span> <span class="title">btn</span>-<span class="title">sm</span>' %&gt;</span></span><br><span class="line"></span><br><span class="line">      &lt;%= link_to <span class="string">'save'</span>, <span class="string">'儲存'</span>, <span class="string">'#'</span>, <span class="class"><span class="keyword">class</span>: '<span class="title">save</span>-<span class="title">tracking</span> <span class="title">btn</span> <span class="title">btn</span>-<span class="title">success</span> <span class="title">btn</span>-<span class="title">sm</span> <span class="title">track_btn</span>', <span class="title">no_text</span>: <span class="title">true</span> %&gt;</span></span><br><span class="line">  &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">&lt;% end %&gt;</span></span><br></pre></td></tr></table></figure><p>我想透過在下儲存link的時候透過<code>ajax</code>打到後端做更新。<br>但首先我需要在畫面上拿到元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下為 Jquery</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'.track_btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> trackNumber = $(<span class="keyword">this</span>).siblings(<span class="string">'.track-val'</span>).val(); <span class="comment">// 我先透過 siblings 方法拿到同層級 .track-val 的val</span></span><br><span class="line">  <span class="keyword">var</span> shipmentNumber = $(<span class="keyword">this</span>).siblings(<span class="string">'input[type=hidden]'</span>).attr(<span class="string">'id'</span>); <span class="comment">// 在一樣透過 siblings 拿到隱藏input的值</span></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    type: <span class="string">'PUT'</span>,</span><br><span class="line">    url: <span class="string">'/api/v1/shipments/'</span> + shipmentNumber + <span class="string">'.json'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      type: <span class="string">'JSON'</span>,</span><br><span class="line">      token: Api.api_key,</span><br><span class="line">      shipment: &#123; <span class="attr">tracking</span>: trackNumber &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  $(<span class="keyword">this</span>).siblings(<span class="string">'.track-val'</span>).attr(<span class="string">'disabled'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>透過這種可以拿到附近元素的方法，方便很多。</p><p>以上為不負責心得</p><p><a href="https://api.jquery.com/siblings/" target="_blank" rel="noopener" title="Title">siblings method說明</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;雖然 &lt;code&gt;Jquery&lt;/code&gt;在現今來說很野蠻，但今天不管它野不野蠻。&lt;/p&gt;
&lt;p&gt;因為專案的關西，前端也會碰到(可以趁機練習)，今天透過&lt;code&gt;ajax&lt;/code&gt;來說看看。&lt;/p&gt;
&lt;p&gt;有時候我們需要透過js來尋找我們要的元素。&lt;br&gt;但當我們在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Rails 綠界參數</title>
    <link href="http://www.willychang.com/2020/08/01/rails-%E7%B6%A0%E7%95%8C%E5%8F%83%E6%95%B8/"/>
    <id>http://www.willychang.com/2020/08/01/rails-%E7%B6%A0%E7%95%8C%E5%8F%83%E6%95%B8/</id>
    <published>2020-08-01T07:20:41.000Z</published>
    <updated>2020-08-01T07:34:49.154Z</updated>
    
    <content type="html"><![CDATA[<p>因為自己負責的專案，所以有碰到綠界金物流，在實際操作下，才知道大家口中說到底有奪*了。</p><p>雖然都有api，但有時候卻寫的不是很明確，導致不管怎麼送，都失敗。</p><p>因為參數，有寫說要帶什麼格式，但卻沒說沒帶時需要給什麼！</p><h1 id="空值！！！-也就是空字串就可以了！！！-‘’"><a href="#空值！！！-也就是空字串就可以了！！！-‘’" class="headerlink" title="空值！！！ 也就是空字串就可以了！！！ ‘’"></a>空值！！！ 也就是空字串就可以了！！！ ‘’</h1><p>比方說: ScheduledDeliveryDate #指定到貨日<br>買家可能會想指定到貨日或者不指定。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scheduled_delivery_date</span></span></span><br><span class="line">  bill_address.arrival_date.presence <span class="params">||</span> <span class="string">''</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>那其實在try了很多次之下，還有寫信去問。<br>才知道可以傳帶空字串即可。</p><p>那我們通常會用 <code>present</code> 方法，再用三元運算，<br>那這邊可以使用 <code>presence</code>，雖然是做一樣的事情，但可以少寫幾個字。<br><code>presence</code>會自己檢查本身是否存在，如果存在，就會回傳自己，<br>假使不存在，則回傳|| <code>&#39;&#39;</code>回去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因為自己負責的專案，所以有碰到綠界金物流，在實際操作下，才知道大家口中說到底有奪*了。&lt;/p&gt;
&lt;p&gt;雖然都有api，但有時候卻寫的不是很明確，導致不管怎麼送，都失敗。&lt;/p&gt;
&lt;p&gt;因為參數，有寫說要帶什麼格式，但卻沒說沒帶時需要給什麼！&lt;/p&gt;
&lt;h1 id=&quot;空值！！
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Rails-super-起飛摟</title>
    <link href="http://www.willychang.com/2020/05/07/Rails-super-%E8%B5%B7%E9%A3%9B%E6%91%9F/"/>
    <id>http://www.willychang.com/2020/05/07/Rails-super-%E8%B5%B7%E9%A3%9B%E6%91%9F/</id>
    <published>2020-05-06T17:06:46.000Z</published>
    <updated>2020-05-06T17:07:21.332Z</updated>
    
    <content type="html"><![CDATA[<p>趁著還有想法的時候，趕快寫下來。<br>因為專案的關係，用到了<code>class_eval</code> and <code>super</code>。<br>相信大家對<code>super</code>不陌生，可能常看到吧。</p><p><code>super</code>是什麼呢？<br><em>It[Super] calls a method on the parent class with the same name as the method that calls super.</em><br>它是當我們想要使用一個類別(class)中的特定方法，但又想保留它父層原有同名方法裡的內容。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hi</span></span></span><br><span class="line">    p <span class="string">"哈摟"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &lt; A</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hi</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">B.new.hi</span><br><span class="line"> =&gt; <span class="string">"哈摟"</span></span><br></pre></td></tr></table></figure><p>A class裡面定義了一個<code>hi</code> method，B class繼承A class，同時B class裡面也定義了<code>hi</code>，在裡面用了super，當B class使用了<code>hi</code>方法時，也一併把B class裡的方法帶到父層A class裡的<code>hi</code> method裡執行。但上面的範例根本不用這樣做，因為既然是繼承了，它根本不用在定義一個同名方法，直接使用<code>B.new.hi</code>也會是一樣的結果。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hi</span></span></span><br><span class="line">    p <span class="string">"哈摟"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &lt; A</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">hi</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">    p <span class="string">"大家好"</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">B.new.hi</span><br><span class="line">=&gt; </span><br><span class="line"><span class="string">"哈摟"</span></span><br><span class="line"><span class="string">"大家好"</span></span><br></pre></td></tr></table></figure><p>雖然範例不是很好，但我這次在B class加了”大家好”，B class <code>hi</code> method，就把它帶到父層A class <code>hi</code> method一起執行了。</p><p>那這次專案裡踩到的雷，是我們使用了<code>class_eval</code>這個method(可自行google or 我哪天會寫一篇)<br>我需要從原本的<code>index</code>繼續延伸下去，所以我以為在<code>class_eval</code>裡用<code>super</code>就能繼續在<code>index</code>寫下去。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">xxxController.class_eval <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">    <span class="comment">#以下我要執行得代碼</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>但會噴<br><em>NoMethodError (super: no superclass method <code>index</code>)</em></p><p>因為這時<code>xxxController.class_eval</code>就是它自己，所以在延伸<code>index</code>時沒有super可用(除非它的父層有<code>index</code>)。<br>我用<code>ancestors</code>來看看這個<code>controller</code>的祖先們是誰，看到以下這些，感覺就沒有繼承<code>index</code>難怪會錯。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Spree::BaseController,</span><br><span class="line">Spree::ViewContext,</span><br><span class="line">ActionController::Base,</span><br><span class="line">Devise::OmniAuth::UrlHelpers,</span><br><span class="line">Devise::Controllers::UrlHelpers,</span><br><span class="line">Devise::Controllers::Helpers,</span><br><span class="line">Devise::Controllers::StoreLocation,</span><br><span class="line">Devise::Controllers::SignInOut,</span><br><span class="line">Turbolinks::Redirection,</span><br><span class="line">Turbolinks::Controller,</span><br><span class="line">Rollbar::Rails::ControllerMethods,</span><br><span class="line">Rollbar::RequestDataExtractor,</span><br><span class="line">ActiveRecord::Railties::ControllerRuntime,</span><br><span class="line">ActionDispatch::Routing::RouteSet::MountedHelpers,</span><br><span class="line">VersionCake::ControllerAdditions,</span><br><span class="line">ActionController::RespondWith,</span><br><span class="line">CanCan::ControllerAdditions,</span><br><span class="line">ActionController::ParamsWrapper,</span><br><span class="line">ActionController::Instrumentation,</span><br><span class="line">ActionController::Rescue</span><br></pre></td></tr></table></figure><p>這時就可以用<code>concern module</code>來<code>include</code>。就可以嘍。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Hello</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    <span class="keyword">super</span></span><br><span class="line">    respond_to <span class="keyword">do</span> <span class="params">|f|</span></span><br><span class="line">      f.html</span><br><span class="line">      f.xlsx <span class="keyword">do</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line">---我是分隔線</span><br><span class="line"></span><br><span class="line">xxxController.class_eval <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">include</span> Hello</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>-W</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;趁著還有想法的時候，趕快寫下來。&lt;br&gt;因為專案的關係，用到了&lt;code&gt;class_eval&lt;/code&gt; and &lt;code&gt;super&lt;/code&gt;。&lt;br&gt;相信大家對&lt;code&gt;super&lt;/code&gt;不陌生，可能常看到吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;super&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>單一表格繼承與多型關聯</title>
    <link href="http://www.willychang.com/2020/05/07/%E5%96%AE%E4%B8%80%E8%A1%A8%E6%A0%BC%E7%B9%BC%E6%89%BF%E8%88%87%E5%A4%9A%E5%9E%8B%E9%97%9C%E8%81%AF/"/>
    <id>http://www.willychang.com/2020/05/07/%E5%96%AE%E4%B8%80%E8%A1%A8%E6%A0%BC%E7%B9%BC%E6%89%BF%E8%88%87%E5%A4%9A%E5%9E%8B%E9%97%9C%E8%81%AF/</id>
    <published>2020-05-06T17:05:56.000Z</published>
    <updated>2020-05-06T17:06:23.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我要活下去"><a href="#我要活下去" class="headerlink" title="我要活下去!!!"></a><a href="#我要活下去" title="我要活下去!!!"></a>我要活下去!!!</h1><p>以前不敢問問題，到現在看到什麼就想問，根本忘了先_查資料_，再發問。</p><p>問問題前，應該先查資料，再把不了解的濃縮成人話(當然這很難！！！</p><p><strong>難的地方不是發問，而是要很讓人聽懂。</strong></p><p>以下是得到的解答，透過我的大腦，解析出的人話(？<br>或許不對，不清楚，再麻煩大家包涵或者直接幹瞧我喔^_&lt;</p><h2 id="單一表格繼承STI-Single-table-inheritance"><a href="#單一表格繼承STI-Single-table-inheritance" class="headerlink" title="單一表格繼承STI(Single-table inheritance)"></a><a href="#單一表格繼承STI-Single-table-inheritance" title="單一表格繼承STI(Single-table inheritance)"></a>單一表格繼承STI(Single-table inheritance)</h2><p><strong>如何將物件導向中的繼承概念，對應到關聯式資料庫的設計，是個大哉問。Rails內建了其中最簡單的一個解法，只用一個資料表儲存繼承體系中的物件，搭配一個<code>type</code>欄位用來指名這筆資料的類別名稱。要開啟STI功能，依照慣例只要有一個欄位叫做<code>type</code>，型態字串即可</strong></p><p>比方說：我有一個 <code>Animal Model</code>，為了要有繼承功能，我們新增 <code>type</code>這個欄位。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><span class="line">  create_table <span class="symbol">:animals</span> <span class="keyword">do</span> <span class="params">|t|</span></span><span class="line">    t.string <span class="symbol">:name</span></span><span class="line">    t.string <span class="symbol">:type</span></span><span class="line">    t.timestamps <span class="symbol">null:</span> <span class="literal">false</span></span><span class="line">  <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>那要被繼承的 Dog、Cat兩個 Model就不用在建立表格欄位了。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &lt; ActiveRecord::Base</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &lt; Animal</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> &lt; Animal</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>這時候他們都繼承了Animal這個爸爸，爸爸有什麼，他們就有什麼了。<br>但缺點就是，爸爸有的，你不一定需要，但你還是得擁有那些欄位。<br>如果要關閉的話就在爸爸身上加上 <code>self.abstract_class = true</code></p><h2 id="多型關聯-Polymorphic-Associations"><a href="#多型關聯-Polymorphic-Associations" class="headerlink" title="多型關聯(Polymorphic Associations)"></a><a href="#多型關聯-Polymorphic-Associations" title="多型關聯(Polymorphic Associations)"></a>多型關聯(Polymorphic Associations)</h2><p><strong>多型關連(Polymorphic Associations)可以讓一個 Model 不一定關連到某一個特定的 Model，秘訣在於除了整數的_id外部鍵之外，再加一個字串的_type欄位說明是哪一種Model。</strong></p><p>多型關聯，當你有某種事情需求，已經有Model在做那件事情時。<br>我在其他Model，也想使用到那件事情時，我就不用在另外建立Model，來做一樣的事情了。</p><p><em>以上想用自己的話表達簡單一點，但覺得太攏統，太模糊了</em></p><p><em>以下引用文件</em></p><p>例如一個Comment model，我們可以透過多型關連讓它belongs_to到各種不同的 Model上，假設我們已經有了Article與Photo這兩個Model，然後我們希望這兩個Model都可以被留言。不用多型關連的話，你得分別建立ArticleComment和PhotoComment的model。用多型關連的話，無論有多少種需要被留言的Model，只需要一個Comment model即可：</p><p><code>rails g model comment content:text commentable_id:integer commentable_type</code></p><p>產生出</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateComments</span> &lt; ActiveRecord::Migration[5.1]</span></span><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><span class="line">    create_table <span class="symbol">:comments</span> <span class="keyword">do</span> <span class="params">|t|</span></span><span class="line">      t.text <span class="symbol">:content</span></span><span class="line">      t.integer <span class="symbol">:commentable_id</span></span><span class="line">      t.string <span class="symbol">:commentable_type</span></span><span class="line"></span><span class="line">      t.timestamps</span><span class="line">    <span class="keyword">end</span></span><span class="line">  <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>這個Migration檔案中，我們用content這個欄位來儲存留言的內容，commentable_id用來儲存被留言的物件的id而commentable_type則用來儲存被留言物件的種類，以這個例子來說被留言的對象就是Article與Photo這兩種Model，這個Migration檔案也可以改寫成下面這樣：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateComments</span> &lt; ActiveRecord::Migration[5.1]</span></span><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">change</span></span></span><span class="line">    create_table <span class="symbol">:comments</span> <span class="keyword">do</span> <span class="params">|t|</span></span><span class="line">      t.text <span class="symbol">:content</span></span><span class="line">      t.belongs_to <span class="symbol">:commentable</span>, <span class="symbol">:polymorphic</span> =&gt; <span class="literal">true</span></span><span class="line">      <span class="comment">#同時會幫你產生出[:commentable_id, :commentable_type]</span></span><span class="line"></span><span class="line">      t.timestamps</span><span class="line">    <span class="keyword">end</span></span><span class="line">  <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>這時就必須指定關聯</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> &lt; ApplicationRecord</span></span><span class="line">  belongs_to <span class="symbol">:commentable</span>, <span class="symbol">:polymorphic</span> =&gt; <span class="literal">true</span></span><span class="line">                          <span class="comment">#透過true來將此關聯指定是多型關聯</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> &lt; ApplicationRecord</span></span><span class="line">  has_many <span class="symbol">:comments</span>, <span class="symbol">:as</span> =&gt; <span class="symbol">:commentable</span></span><span class="line">                      <span class="comment">#我們用:as來指定 :commentable這個參數作為多型關聯的接口</span></span><span class="line">                      <span class="comment">#:as是什麼？可以看has_one or has_many API</span></span><span class="line"><span class="keyword">end</span></span><span class="line"></span><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Photo</span> &lt; ApplicationRecord</span></span><span class="line">  has_many <span class="symbol">:comments</span>, <span class="symbol">:as</span> =&gt; <span class="symbol">:commentable</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>接下來可以透過關聯來新增留言</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span></pre></td><td class="code"><pre><span class="line">article &#x3D; Article.first</span><span class="line"></span><span class="line">#透過關連新增留言</span><span class="line">comment &#x3D; article.comments.create(:content &#x3D;&gt; &quot;First Comment&quot;)</span><span class="line"></span><span class="line">#你可以發現 Rails 很聰明的幫我們指定了被留言物件的種類和id</span><span class="line">comment.commentable_type &#x3D;&gt; &quot;Article&quot;</span><span class="line">comment.commentable_id &#x3D;&gt; 1</span><span class="line"></span><span class="line">#也可以透過 commentable 反向回查關連的物件</span><span class="line">comment.commentable &#x3D;&gt; #&lt;Article id: 1, ....&gt;</span></pre></td></tr></table></figure><p>簡單來說，我有一個留言的model了，我在文章與照片都想要可以留言，既然已經有model在做這件事了，<br>我們就使用多型關聯來連到那裡去。就不用說還需要再另外建立什麼了。</p><p>文章引用參考至：<br><a href="https://ihower.tw/rails/activerecord-relationships.html" target="_blank" rel="noopener">https://ihower.tw/rails/activerecord-relationships.html</a><br><a href="https://ihower.tw/rails/activerecord-others.html" target="_blank" rel="noopener">https://ihower.tw/rails/activerecord-others.html</a></p><p>-W</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;我要活下去&quot;&gt;&lt;a href=&quot;#我要活下去&quot; class=&quot;headerlink&quot; title=&quot;我要活下去!!!&quot;&gt;&lt;/a&gt;&lt;a href=&quot;#我要活下去&quot; title=&quot;我要活下去!!!&quot;&gt;&lt;/a&gt;我要活下去!!!&lt;/h1&gt;&lt;p&gt;以前不敢問問題，到現在看到什
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>類別是什麼？物件是什麼？</title>
    <link href="http://www.willychang.com/2020/05/07/%E9%A1%9E%E5%88%A5%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E7%89%A9%E4%BB%B6%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/"/>
    <id>http://www.willychang.com/2020/05/07/%E9%A1%9E%E5%88%A5%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F%E7%89%A9%E4%BB%B6%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/</id>
    <published>2020-05-06T17:05:12.000Z</published>
    <updated>2020-05-06T17:05:37.002Z</updated>
    
    <content type="html"><![CDATA[<p>既然是物件導向程式設計，那物件是什麼？<br>其實我覺得應該先搞懂這個。<br>趁著清明連假，先了解一些基礎，不然很多基礎搞不懂，根本只是個會寫code的人，因為我不懂它運作的原理。</p><p>類別：一張設計圖，藍圖，可以參考的文件，沒有實體的存在。<br><em>但在Ruby的世界裡，類別也是一個物件。</em><br>物件：看得到、摸得到的實體，屬於動態，但狀態隨時會改變。</p><p>在Ruby裡如何定義一個類別呢？</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><span class="line">  <span class="comment">#...</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>這樣我們就定義了Cat 這個class(類別)<br>當然裡面可以定義很多methods(方法)</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(food)</span></span></span><span class="line">    puts <span class="string">"<span class="subst">#&#123;food&#125;</span> 好好吃！"</span></span><span class="line">  <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>我們先定義一個 <code>eat</code> 這個方法。<br>接下來用 <code>new</code>方法來把 Cat類別創造出新的物件。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">willy = Cat.new</span><span class="line">willy.eat(<span class="string">"罐頭"</span>) =&gt; 印出 [罐頭 好好吃!]</span></pre></td></tr></table></figure><p>簡單來說，為什麼說類別是一張設計圖？<br>比方要蓋一棟房子，首先需要一張設計圖(類別)<br>那你要透過<code>new</code>出設計圖的房子(物件)<br>透過這樣簡單的的比喻，就可以把類別與物件分得比較清楚。</p><p>可能比喻的不是很好，再麻煩大家給我一些指教。</p><p>-W</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;既然是物件導向程式設計，那物件是什麼？&lt;br&gt;其實我覺得應該先搞懂這個。&lt;br&gt;趁著清明連假，先了解一些基礎，不然很多基礎搞不懂，根本只是個會寫code的人，因為我不懂它運作的原理。&lt;/p&gt;
&lt;p&gt;類別：一張設計圖，藍圖，可以參考的文件，沒有實體的存在。&lt;br&gt;&lt;em&gt;但在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Ruby裡的字串與符號-Symbol</title>
    <link href="http://www.willychang.com/2020/05/07/Ruby%E8%A3%A1%E7%9A%84%E5%AD%97%E4%B8%B2%E8%88%87%E7%AC%A6%E8%99%9F-Symbol/"/>
    <id>http://www.willychang.com/2020/05/07/Ruby%E8%A3%A1%E7%9A%84%E5%AD%97%E4%B8%B2%E8%88%87%E7%AC%A6%E8%99%9F-Symbol/</id>
    <published>2020-05-06T17:04:08.000Z</published>
    <updated>2020-05-06T17:10:24.423Z</updated>
    
    <content type="html"><![CDATA[<p>淺談在Ruby裡的字串與符號，首先我們先看看字串的樣字</p><p>字串物件的組合是由<br><img src="https://miro.medium.com/max/988/1*Zsq3bUJJq3Vb5u2yZ1BRjA.png" alt=""><br>一個變數來指向字串物件，來形成字串物件，如果沒有指向字串這個名字(name)變數，則無法成立單獨身存。因為它是空的，沒有代表任何物件。也可以稱為String物件。</p><p>再來看看 Symbol<br><img src="https://miro.medium.com/max/1004/1*MoyMzPZYE1DCIYlc3ZCTsw.png" alt=""><br>一樣是由一個變數來指向 :name ，但這時候就不是字串物件了，而變成符號(Symbol)。</p><p>那字串與符號的不同呢？</p><p>字串是可以更改內容的，而符號_(Symbol)_是不能的!!! (以下就直接通稱符號</p><p>因為這時候符號已經變成了有名字的字串了。</p><p>就像你的名字可以更改嗎？好啦其實可以，去戶政事務所。</p><p>舉例看看：好比今天棒球的本壘板，它已經定義叫做本壘板了，不可能更改叫一壘或二壘吧。</p><p>我們也可以用.class來看這時候變數是什麼個物件類別。<br><img src="https://miro.medium.com/max/1400/1*uxSej6MER94aPyjNWOPS-g.png" alt=""><br><img src="https://miro.medium.com/max/1400/1*jDtsL5xdlQxJ4zgtyo4Rxw.png" alt=""><br>符號類別字串物件類別可以看得出來他們的類別不一樣吧 😃</p><p>當然它們也有別的不同之處，物件的ID位置(身分證字號)，我們可以用</p><p>.object_id 來查詢它們所在的ID位置。<br><img src="https://miro.medium.com/max/1400/1*SSlfrvyi36iAQChyn_eXtA.png" alt=""><br>有看到右邊一串一串的亂碼嗎？那就是willy這個字串的ID位置，每次輸入每次的位置不同，因為每次查詢都會在建立一個新字串，才會有不同的ID位置。<br><img src="https://miro.medium.com/max/1400/1*mTY9-ECbZ5VMezHX21rOLw.png" alt=""><br>但符號的ID位置是不會改變的，因為ID位置如果相同的話，表示它們都是同一個物件，這樣下次需要這個符號時，記憶體就不用在新增一份，直接從記憶體取出，相對的符號也較省記憶體空間。</p><p>字串及 符號(Symbol) 類別都有提供一些方法可以互相轉換，</p><p>我們可以用:</p><p>字串轉符號使用:to_sym</p><p>符號轉字串使用:to_s</p><p>那我們的使用時機呢？可以用在Hash裡的key:</p><p>因為它能更快的被找到。</p><p>總結：</p><p>字串與符號同樣是一個物件，但類別不同，使用方法也不同。</p><p>但我覺得符號的用途比較像是更明確的表現物件給人的意思，</p><p>因為它的內容是不可以改變的！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;淺談在Ruby裡的字串與符號，首先我們先看看字串的樣字&lt;/p&gt;
&lt;p&gt;字串物件的組合是由&lt;br&gt;&lt;img src=&quot;https://miro.medium.com/max/988/1*Zsq3bUJJq3Vb5u2yZ1BRjA.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;一個變數來指
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Rails-追code-小技巧</title>
    <link href="http://www.willychang.com/2020/05/07/Rails-%E8%BF%BDcode-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://www.willychang.com/2020/05/07/Rails-%E8%BF%BDcode-%E5%B0%8F%E6%8A%80%E5%B7%A7/</id>
    <published>2020-05-06T17:02:24.000Z</published>
    <updated>2020-05-06T17:03:27.579Z</updated>
    
    <content type="html"><![CDATA[<p>是不是有時候覺得，幹這方法到底在哪裡？到底是幹嘛的？然後這個object到底有哪些方法可以用？滿頭問好？？？本人正是如此</p><p>今天假設我們有一個 Cat class，裡面有兩個methods，當然可能更多。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span></span><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span></span></span><span class="line">  <span class="keyword">end</span></span><span class="line">  </span><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span></span><span class="line">  <span class="keyword">end</span></span><span class="line"><span class="keyword">end</span></span></pre></td></tr></table></figure><p>那我們可以用 Cat.new.methods，在consolo裡面查這個class裡，到底有哪些方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Cat.new.methods</span><span class="line"> =&gt; [<span class="symbol">:run</span>, <span class="symbol">:eat</span>, <span class="symbol">:instance_variable_set</span>, <span class="symbol">:instance_variable_defined?</span>, <span class="symbol">:remove_instance_variable</span>, <span class="symbol">:instance_of?</span>, <span class="symbol">:kind_of?</span>, <span class="symbol">:is_a?</span>, <span class="symbol">:tap</span>, <span class="symbol">:instance_variable_get</span>, <span class="symbol">:public_methods</span>, <span class="symbol">:instance_variables</span>, <span class="symbol">:method</span>, <span class="symbol">:public_method</span>, <span class="symbol">:define_singleton_method</span>, <span class="symbol">:public_send</span>, <span class="symbol">:singleton_method</span>, <span class="symbol">:extend</span>, <span class="symbol">:pp</span>, <span class="symbol">:to_enum</span>, <span class="symbol">:enum_for</span>, <span class="symbol">:&lt;=&gt;</span>, <span class="symbol">:===</span>, <span class="symbol">:=~</span>, <span class="symbol">:</span>!~, <span class="symbol">:eql?</span>, <span class="symbol">:respond_to?</span>, <span class="symbol">:freeze</span>, <span class="symbol">:inspect</span>, <span class="symbol">:object_id</span>, <span class="symbol">:send</span>, <span class="symbol">:to_s</span>, <span class="symbol">:display</span>, <span class="symbol">:nil?</span>, <span class="symbol">:hash</span>, <span class="symbol">:class</span>, <span class="symbol">:singleton_class</span>, <span class="symbol">:clone</span>, <span class="symbol">:itself</span>, <span class="symbol">:dup</span>, <span class="symbol">:taint</span>, <span class="symbol">:yield_self</span>, <span class="symbol">:untaint</span>, <span class="symbol">:tainted?</span>, <span class="symbol">:untrusted?</span>, <span class="symbol">:untrust</span>, <span class="symbol">:frozen?</span>, <span class="symbol">:trust</span>, <span class="symbol">:methods</span>, <span class="symbol">:singleton_methods</span>, <span class="symbol">:protected_methods</span>, <span class="symbol">:private_methods</span>, <span class="symbol">:</span>!, <span class="symbol">:equal?</span>, <span class="symbol">:instance_eval</span>, <span class="symbol">:==</span>, <span class="symbol">:instance_exec</span>, <span class="symbol">:</span>!=, <span class="symbol">:__id__</span>, <span class="symbol">:__send__</span>]</span></pre></td></tr></table></figure><p>有看到前面兩個method嗎？是我們自己定義的method，也看到了這個calss繼承的所有的method。</p><p>那我只想看只定義在這個calss裡的method呢？</p><p>可以用 Cat.new.methods - Object.new.methods</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Cat.new.methods - Object.new.methods</span></pre></td></tr></table></figure><p>那有些幫你做好的method，它的原始碼在哪裡？想看它是怎麼做的</p><p>這時候我們就可以用Rails 的小技巧</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line">cat = Cat.new </span><span class="line"></span><span class="line">cat.method(<span class="symbol">:run</span>)</span><span class="line"><span class="comment"># =&gt; #&lt;Method: cat#run&gt;</span></span><span class="line"></span><span class="line">cat.method(<span class="symbol">:run</span>).source_location</span><span class="line"><span class="comment"># =&gt; ["cat.rb", 1]</span></span></pre></td></tr></table></figure><p>這樣追，一直追追追，追到天涯海角吧～～～</p><p><a href="https://www.spreered.com/learn-rail-by-ruby/" target="_blank" rel="noopener">https://www.spreered.com/learn-rail-by-ruby/</a><br>本篇參考以上文章</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;是不是有時候覺得，幹這方法到底在哪裡？到底是幹嘛的？然後這個object到底有哪些方法可以用？滿頭問好？？？本人正是如此&lt;/p&gt;
&lt;p&gt;今天假設我們有一個 Cat class，裡面有兩個methods，當然可能更多。&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Heroku-Application-error解決</title>
    <link href="http://www.willychang.com/2020/05/07/Heroku-Application-error%E8%A7%A3%E6%B1%BA/"/>
    <id>http://www.willychang.com/2020/05/07/Heroku-Application-error%E8%A7%A3%E6%B1%BA/</id>
    <published>2020-05-06T17:01:11.000Z</published>
    <updated>2020-05-06T17:01:47.820Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://miro.medium.com/max/1400/1*l2kUD9UHZDBqDir9mLqOSQ.png" alt=""><br>因為把第一個專案要推上Heroku，滿心期待第一個作品可以上線，看著其他同學都有畫面，我卻跑這他額娘的Application error畫面，真是讓人難過。</p><p>於是就透過 <code>heroku logs - tail</code> 這段指令，看到了以下畫面</p><p><img src="https://miro.medium.com/max/560/1*lKzMg6p58XUGUeqMoJe9Kw.png" alt=""></p><p>他等待了60秒的PROT，但都沒有收到，後來才發現，因為專案裡的Profile已經寫死了 3000。</p><p><code>web: bin/rails server -p 3000</code></p><p>改成</p><p><code>web: bin/rails server -p $PORT</code></p><p>可能是因為Heroku不能指定PROT的關係。</p><p>如果你的問題也跟我一樣，可以嘗試看看這個方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*l2kUD9UHZDBqDir9mLqOSQ.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;因為把第一個專案要推上Heroku，滿心期待第一個作品可以上線，看著其他同學都有畫面，我卻跑這他額娘的Ap
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git 是什麼</title>
    <link href="http://www.willychang.com/2020/05/07/Git-%E6%98%AF%E4%BB%80%E9%BA%BC/"/>
    <id>http://www.willychang.com/2020/05/07/Git-%E6%98%AF%E4%BB%80%E9%BA%BC/</id>
    <published>2020-05-06T16:59:50.000Z</published>
    <updated>2020-05-06T17:00:16.161Z</updated>
    
    <content type="html"><![CDATA[<p>git是什麼？版本控制？對於第一次聽到的我，版本控制是啥？</p><p>沒錯，就是這樣，版本控制我連語意都不懂，但其實用來很方便也不簡單(誤</p><p>應該說要用的很熟透，真的必須練習加上實作。</p><p>那它到底是什麼呢？其實可以把它想成玩遊戲在存檔，把你的文件存檔，然後推到GitHub(Git跟GitHub不一樣)，你應該可以想像，當<br>你要改檔案，但又怕改下去爆掉，是不是都會拷貝一份，當你爆了在拷貝一份就好了，很方便對吧，當你回過神時，你已經拷貝了20份了。</p><p>這時候Git的好處就來了，你存檔了，push上去了，改壞了，在clone下來就好了，而且每次修改的紀錄，都會被存進去，可以看出來這<br>段code跟上段哪裡有不一樣。</p><p>難嗎？只要會add , commit , push 就好了啊，但當你想合併分支，刪除分支 ，這些指令也是必須記一下的。<br><img src="https://pic1.xuehuaimg.com/proxy/csdn/https://img-blog.csdnimg.cn/20181205192850247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzMTQxNjA=,size_16,color_FFFFFF,t_70" alt=""><br>上面的說明，很清楚，用講的用背的，不如實際操作看看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git是什麼？版本控制？對於第一次聽到的我，版本控制是啥？&lt;/p&gt;
&lt;p&gt;沒錯，就是這樣，版本控制我連語意都不懂，但其實用來很方便也不簡單(誤&lt;/p&gt;
&lt;p&gt;應該說要用的很熟透，真的必須練習加上實作。&lt;/p&gt;
&lt;p&gt;那它到底是什麼呢？其實可以把它想成玩遊戲在存檔，把你的文件
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>搭起來啦啦啦</title>
    <link href="http://www.willychang.com/2020/05/07/%E6%90%AD%E8%B5%B7%E4%BE%86%E5%95%A6%E5%95%A6%E5%95%A6/"/>
    <id>http://www.willychang.com/2020/05/07/%E6%90%AD%E8%B5%B7%E4%BE%86%E5%95%A6%E5%95%A6%E5%95%A6/</id>
    <published>2020-05-06T16:55:39.000Z</published>
    <updated>2020-05-06T16:58:37.830Z</updated>
    
    <content type="html"><![CDATA[<p>趁著清明連假，又加上剛好疫情的關係，沒有去掃墓。</p><p><em>又加上現在人家說去掃墓，只是更早跟墓裡的團員。</em></p><p>所以趕快搭起來，不然我的電腦裡有好幾個blog檔案，根本都跟新的一樣ＸＤ</p><p>這次用Hexo來搭配GitHub Pages，雖然在裝Hexo的時候花了一些時間，</p><p>因為Hexo的檔案位置不對，所以不管怎樣我下 <code>hexo init</code></p><p>都得到 <code>zsh: command not found: hexo</code></p><p>最後解決辦法是</p><p>#刪除安裝<br><code>yarn global remove hexo-cli</code><br>#重新安裝<br><code>yarn global add hexo-cli --prefix /usr/local</code></p><p>之後再執行 hexo 就有了。</p><p>一直都很想搭部落格起來，加上開始工作的原因(根本不是藉口)<br>遲遲還沒動手，但發上實在有太多需要寫下來的。</p><p>畢竟能用別人看得懂的話說明出來，都是經過腦子思考的，<br>雖然問問題很難，但我依舊持續學習中啦啦啦啦啦</p><p>-W</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;趁著清明連假，又加上剛好疫情的關係，沒有去掃墓。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;又加上現在人家說去掃墓，只是更早跟墓裡的團員。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;所以趕快搭起來，不然我的電腦裡有好幾個blog檔案，根本都跟新的一樣ＸＤ&lt;/p&gt;
&lt;p&gt;這次用Hexo來搭配GitHub Page
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
